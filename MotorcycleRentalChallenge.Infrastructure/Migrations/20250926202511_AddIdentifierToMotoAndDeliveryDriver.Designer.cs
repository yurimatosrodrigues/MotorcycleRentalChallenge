// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MotorcycleRentalChallenge.Infrastructure.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MotorcycleRentalChallenge.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250926202511_AddIdentifierToMotoAndDeliveryDriver")]
    partial class AddIdentifierToMotoAndDeliveryDriver
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MotorcycleRentalChallenge.Core.Entities.DeliveryDriver", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CnhImagePath")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("CnhNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<int>("CnhType")
                        .HasColumnType("integer");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("character varying(14)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("CnhNumber")
                        .IsUnique();

                    b.HasIndex("Cnpj")
                        .IsUnique();

                    b.ToTable("DeliveryDrivers");
                });

            modelBuilder.Entity("MotorcycleRentalChallenge.Core.Entities.Motorcycle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<string>("Plate")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Plate")
                        .IsUnique();

                    b.ToTable("Motorcycles");
                });

            modelBuilder.Entity("MotorcycleRentalChallenge.Core.Entities.Rental", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("DailyRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("DeliveryDriverId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpectedEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("MotorcycleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RentalPlanId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("TotalCost")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.HasKey("Id");

                    b.HasIndex("DeliveryDriverId");

                    b.HasIndex("MotorcycleId");

                    b.HasIndex("RentalPlanId");

                    b.ToTable("Rentals");
                });

            modelBuilder.Entity("MotorcycleRentalChallenge.Core.Entities.RentalPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("DailyRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Days")
                        .HasColumnType("integer");

                    b.Property<decimal?>("PenaltyPercentageForUnusedDays")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("RentalPlan");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fc520cfd-ce80-4a0f-9a0d-da6cc2612fd5"),
                            CreatedAt = new DateTime(2025, 9, 26, 20, 25, 11, 315, DateTimeKind.Utc).AddTicks(9694),
                            DailyRate = 30m,
                            Days = 7,
                            PenaltyPercentageForUnusedDays = 0.2m
                        },
                        new
                        {
                            Id = new Guid("ec5d34e7-ed4e-427f-a28e-4c58c9c94193"),
                            CreatedAt = new DateTime(2025, 9, 26, 20, 25, 11, 315, DateTimeKind.Utc).AddTicks(9698),
                            DailyRate = 28m,
                            Days = 15,
                            PenaltyPercentageForUnusedDays = 0.4m
                        },
                        new
                        {
                            Id = new Guid("426a33dc-7b4c-4b55-a195-e9b82e8098d3"),
                            CreatedAt = new DateTime(2025, 9, 26, 20, 25, 11, 315, DateTimeKind.Utc).AddTicks(9700),
                            DailyRate = 22m,
                            Days = 30
                        },
                        new
                        {
                            Id = new Guid("5b4b1cb5-8d2c-4b1b-9553-03b61cb0e44f"),
                            CreatedAt = new DateTime(2025, 9, 26, 20, 25, 11, 315, DateTimeKind.Utc).AddTicks(9701),
                            DailyRate = 20m,
                            Days = 45
                        },
                        new
                        {
                            Id = new Guid("41e5d448-9f0d-4992-a6c9-5676d6871fc4"),
                            CreatedAt = new DateTime(2025, 9, 26, 20, 25, 11, 315, DateTimeKind.Utc).AddTicks(9702),
                            DailyRate = 18m,
                            Days = 50
                        });
                });

            modelBuilder.Entity("MotorcycleRentalChallenge.Core.Entities.Rental", b =>
                {
                    b.HasOne("MotorcycleRentalChallenge.Core.Entities.DeliveryDriver", "DeliveryDriver")
                        .WithMany("Rentals")
                        .HasForeignKey("DeliveryDriverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MotorcycleRentalChallenge.Core.Entities.Motorcycle", "Motorcycle")
                        .WithMany("Rentals")
                        .HasForeignKey("MotorcycleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MotorcycleRentalChallenge.Core.Entities.RentalPlan", "RentalPlan")
                        .WithMany("Rentals")
                        .HasForeignKey("RentalPlanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DeliveryDriver");

                    b.Navigation("Motorcycle");

                    b.Navigation("RentalPlan");
                });

            modelBuilder.Entity("MotorcycleRentalChallenge.Core.Entities.DeliveryDriver", b =>
                {
                    b.Navigation("Rentals");
                });

            modelBuilder.Entity("MotorcycleRentalChallenge.Core.Entities.Motorcycle", b =>
                {
                    b.Navigation("Rentals");
                });

            modelBuilder.Entity("MotorcycleRentalChallenge.Core.Entities.RentalPlan", b =>
                {
                    b.Navigation("Rentals");
                });
#pragma warning restore 612, 618
        }
    }
}
